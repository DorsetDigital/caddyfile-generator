<?php

namespace DorsetDigital\Caddy\Admin;

use SilverStripe\Forms\CheckboxField;
use SilverStripe\Forms\HeaderField;
use SilverStripe\Forms\HiddenField;
use SilverStripe\Forms\TextField;
use SilverStripe\ORM\DataObject;

/**
 * Class \DorsetDigital\Caddy\Admin\DBCredentials
 *
 * @property string $DBUserName
 * @property string $DBPassword
 * @property string $DBName
 * @property int $Status
 * @property int $VirtualHostID
 * @method \DorsetDigital\Caddy\Admin\VirtualHost VirtualHost()
 */
class DBCredentials extends DataObject
{
    const STATUS_ACTIVE = 1;
    const STATUS_PENDING = 2;
    const STATUS_ERROR = 3;

    private static $table_name = 'DBCredentials';
    private static $db = [
        'DBUserName' => 'Varchar(255)',
        'DBPassword' => 'Varchar(255)',
        'DBName' => 'Varchar',
        'Status' => 'Int'
    ];
    private static $has_one = [
        'VirtualHost' => VirtualHost::class
    ];

    private function getStatusOpts()
    {
        return [
            self::STATUS_ACTIVE => _t(__CLASS__ . '.active', 'Active'),
            self::STATUS_PENDING => _t(__CLASS__ . '.pending', 'Pending'),
            self::STATUS_ERROR => _t(__CLASS__ . '.error', 'Error')
        ];
    }

    private static $summary_fields = [
        'DBUserName' => 'DB User',
        'VirtualHost.Title' => 'Virtual host',
        'NiceStatus' => 'Status'
    ];


    public function getNiceStatus()
    {
        if ($this->Status > 0) {
            $opts = $this->getStatusOpts();
            return $opts[$this->Status];
        }
        return null;
    }

    public function getCMSFields()
    {
        $fields = parent::getCMSFields();
        $fields->removeByName(['Status']);
        $fields->addFieldsToTab('Root.Main', [
            TextField::create('NiceStatus', 'Status')
                ->setValue($this->getNiceStatus())
                ->setReadonly(true)
        ]);
        if ($this->Status === self::STATUS_PENDING) {
            $fields->addFieldsToTab('Root.Main', [
                CheckboxField::create('CreateLive', 'Create user on production DB')
                    ->setDescription('User will be created when this box is checked, and the record is re-saved')
            ]);
        }
        if ($this->Status === self::STATUS_ACTIVE) {
            $confCode = strtoupper(uniqid());
            $fields->addFieldsToTab('Root.Main', [
                HeaderField::create('Delete user'),
                CheckboxField::create('DeleteLive', 'Delete user from production DB')
                    ->setDescription('The user will only be removed if this box is checked, and the record is re-saved'),
                TextField::create('ConfCodeConfirm', 'Confirmation Code')
                    ->setDescription('Please enter the following code in the box to confirm deletion: ' . $confCode),
                HiddenField::create('ConfCode')->setValue($confCode)
            ]);
        }

        return $fields;
    }

    public function onBeforeWrite()
    {
        parent::onBeforeWrite();
        if (!$this->isInDB()) {
            $this->Status = self::STATUS_PENDING;
        } else {
            if (($this->CreateLive) && ($this->Status === self::STATUS_PENDING)) {
                //Add the user to the DB

                //Set the status to active
                $this->Status = self::STATUS_ACTIVE;
            }
        }
    }

    public function validate()
    {
        return parent::validate(); // TODO: Change the autogenerated stub
    }


}
